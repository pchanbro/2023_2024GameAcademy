day05


1. 집합 (set)


리스트, 튜플, range, 문자열 -> 시퀀스
딕셔너리 -> 키-값 쌍 {쌍}
세트 -> 값이 1개씩 {1개}


a = {}


- 중괄호 안에 값을 저장
- 콤마를 이용해서 값 들을 구분




- 요소의 순서가 없다 (unordered)


- 같은 값을 여러 번 넣더라도 중복되는 값은 1번만 나옴


- []를 이용해서 인덱싱, 키 조회 불가능




1) in 연산자


요소 in 집합 -> 있으면 True, 없으면 False
요소 not in 집합 -> 반대로




2) 집합 만들기


a = set() -> 빈 집합
a = {} -> 딕셔너리를 만듬


집합 = set(시퀀스)


set 안의 요소에는 기본 자료형만 넣을 수 있음
-> set 안에는 set을 넣을 수 없다




3) frozenset 사용하기


frozenset -> set의 변경: set 함수 사용
set -> frozenset의 변경: frozenset 함수 사용


fronzenset으로 만든 집합은 내부 요소를 바꿀 수 없음




frozenset 안에 frozenset을 넣을 수 있음
-> 같은 값을 넣으면 1개만 나온다




4) 합집합 (union)


set.union(집합1, 집합2)
집합1 | 집합2




5) 교집합 (intersection)
set.intersection(집합1, 집합2)
집합1 & 집합2




6) 차집합 (difference)
set.difference(집합1, 집합2)
집합1 - 집합2




7) 대칭차집합 (symmetric_difference)
set.symmetric_difference(집합1, 집합2)
= 합집합 - 교집합
집합1 ^ 집합2




8) 집합연산 + 대입연산


(1) 요소 추가
집합.update(다른 집합)
집합 |= 다른 집합


(2) 
집합.intersection_update(다른 집합)
집합 &= 다른 집합


(3) 요소 제거
집합.difference_update(다른 집합)
집합 -= 다른 집합


(4)
집합.symmetric_difference_update(다른 집합)
집합 ^= 다른 집합




9) 부분집합
집합1.issubset(집합2)
집합1 <= 집합2


진부분집합
집합1 < 집합2




10) 상위집합
집합1.issuperset(집합2)
집합1 >= 집합2


진상위집합
집합1 > 집합2




11) 비교


집합의 비교는 순서 상관 없이 내부 구성 요소가 동일한지 확인


집합1 == 집합2
집합1 != 집합2




12) 교집합이 없냐? (disjoint)


교집합이 없으면 True
교집합이 있으면 False




13) 집합에 요소 추가
집합.add(요소)
-> 기존 요소를 추가하더라도 에러 발생 X




14) 집합에 요소 삭제
집합.remove(요소)
-> 없는 요소는 에러 발생 KeyError


집합.discard(요소)
-> 없는 요소면 그냥 넘어간다


집합.pop()
-> 임의의 요소를 가져와 출력하고 + 삭제
-> 없으면 에러


집합.clear()
-> 모든 요소 삭제




15) 집합 요소 개수


length -> len(집합)




16) 복사하기


집합2 = 집합1.copy()




2. 제어문


파이썬 코드를 제어해주는 구문
- 조건문
  : 조건에 따라 만족을 하면 코드를 실행 O/X
  : if - elif - else 문
- 반복문
  : 특정 횟수/조건에 따라서 만족하면 코드를 실행 O/X
  : for - while




3. 조건문


if 조건이 참이면(조건식):
    코드를 실행


if문 안에 속해있는 코드를 쓸 때
반드시 앞의 공백이 잘 되어있나 
- 공백의 개수는 항상 동일해야 한다
(코랩 2칸, idle 4칸)


조건식
-> 논리형 True, False
   (조건 연산자 > < ==, 논리 연산자 and or not)
-> 수치형, 문자형, 리스트, ...




중첩 조건문: if문 안에 if문을 쓰는 구조
-> if안에 if안에 코드는 반드시 if 개수만큼 공백 개수를 맞춰야 한다








점수 >= 90
합격입니다
축하합니다


점수 >= 70
합격입니다


점수 < 70
불합격입니다




4. else 문


if -> 조건이 참이었을 때 코드를 실행
else -> 조건이 거짓일 때 코드를 실행


else는 반드시 조건이 있어야 하기 -> if-else는 짝을 맺음
if-else의 짝은 앞의 들여쓰기 칸 수로 확인




5. elif 문


if -> 조건이 참
elif -> 직전 조건문이 거짓인데 내 조건이 참
else -> 조건이 거짓


elif도 반드시 if-elif 짝을 맺음
if-elif는 짝의 앞의 들여쓰기 칸 수로 확인




6. True/False 취급


논리형
True -> True
False -> False


정수/실수/복소수형
0 -> False
나머지 모든 수 -> True


문자열: "" -> False
리스트/튜플/딕셔너리/집합: [], (), {} -> False


None -> False
없다 -> 객체가 없다