day07

1. 리스트와 반복문

for 변수 in 시퀀스:
  print(변수)

1) enumerate(시퀀스)
해당 변수가 몇 번째 인덱스에 있는지 알려주는 함수
-> 인덱스 번호와 값

for 인덱스, 요소 in enumerate(리스트)

인덱스 번호의 시작 번호를 바꾸고 싶다

start 속성
enumerate(시퀀스, [start=]시작번호)


2) 리스트의 최솟값, 최댓값

(1) 최솟값, 최댓값을 for문으로 직접구하는 방법

최솟값 = 리스트의 0번 인덱스 초기화
최댓값 = 리스트의 0번 인덱스 초기화

최솟값 변수보다 내가 더 작으면
내가 최솟값에 더 가깝다 -> 나를 최소값으로 저장

최댓값 변수보다 내가 더 크면
내가 최댓값에 더 가깝다 -> 나를 최댓값으로 저장


(2) 정렬 함수를 이용하는 방법

리스트.sort()
리스트[0] -> 최솟값, 리스트[-1] -> 최댓값


(3) 최솟값, 최댓값 함수를 이용하는 방법

min(리스트), max(리스트)


2. 리스트 컴프리헨션(=리스트 확장, 내포)

일반적으로 리스트 생성
-> 값을 쓰거나 range를 이용하거나
-> for문과 if문

a = [1, 2, 3]
a = list(range(1, 4))
a = [i for i in range(1, 4)]
a = list(i for i in range(1, 4))
         3)     2)     1)
1) range에서 수를 생성한다
2) 생성한 수를 i로 꺼낸다
3) 리스트에 i를 저장한다
  -> 맨 앞의 i 대신 i를 활용한 수식을 넣으면
     해당 수식에 대한 값을 저장
4) 반복한다


a = [식 for 변수 in 시퀀스 if 조건]

1) 시퀀스에서 값을 생성한다
2) 생성한 수를 변수에 저장한다
3) 변수를 조건에 넣는다
4) 조건이 참이면 식을 적용해서 리스트에 넣는다
5) 반복한다



a = [i+100 for i in range(10) if i % 2 == 1]

a = []
for i in range(10):
  if i % 2 == 1:
    a.append(i+100)



a = [들어갈식 for문 if문]

a = []
for문:
  if문:
    a.append(들어갈식)


3. 튜플 컴프리헨션 (=내포)

list 대신 tuple


4. map

a, b = map(int, input().split())

map(함수, 시퀀스)
-> 시퀀스의 각 요소에 대해서 함수를 적용해준다

"1 2" -> ["1", "2"]
          int  int
      ->  1, 2  -list-> [1, 2]


a = list(map(str, list(range(5))))
                   [0,1,2,3,4]
          ['0', '1', '2', '3', '4']

a = list(map(f, ['a', 'b', 'c']))

f = lambda x: x.upper()


5. 딕셔너리와 반복문

for 키 in 딕셔너리:

for 키, 값 in 딕셔너리.items():

for 값 in 딕셔너리.values():


6. 딕셔너리 내포
딕셔너리 = {키: 값 for 키, 값 in 다른딕셔너리}
     dict(키: 값 for 키, 값 in 다른딕셔너리}


학생들의 이름을 한 줄로 입력받습니다 -> input
학생들의 성적을 한 줄로 입력받습니다 -> map
-> 딕셔너리로 저장 -> dict, zip

이 학생들 중 70점 이상인 학생만 가져오고
-> 딕셔너리 내포

이 학생들의 이름을 리스트로 저장해서 정렬하여 출력 -> keys, sort

james john victor maria alex
68 100 90 30 75

['alex', 'john', 'victor']

