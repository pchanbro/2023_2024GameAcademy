day04

1. 리스트 조작 함수

1) 요소 추가하기
- 마지막에 요소 1개 추가하기
리스트.append(요소)

- 마지막에 요소 여러 개 추가하기
리스트에 리스트 추가 -> 확장
리스트.extend(시퀀스)


append로 리스트를 추가하면 -> 리스트가 통째로 추가
extend로 리스트를 추가하면 -> 리스트가 풀려서 추가

- 특정 위치에 요소 추가하기
리스트.insert(인덱스, 요소)

인덱스 번호가 존재하는 인덱스 번호 -> 그 자리에 끼어 들어간다
인덱스 번호가 길이보다 큰 경우 -> 마지막에 들어간다

- 특정 위치에 요소 여러 개 추가하기

리스트의 슬라이싱 활용

리스트[인덱스:인덱스] = 시퀀스


2) 요소 삭제하기
- 인덱스 기준 삭제
리스트.pop() -> 마지막 요소를 가져오면서 삭제
리스트.pop(인덱스) -> 해당 인덱스 요소를 가져오면서 삭제

  - 인덱스번호를 벗어나면(길이보다 큰/작은 경우) IndexError가 발생
  - 음수 인덱스는 정상 작동

del 리스트[인덱스] -> 삭제


- 값 기준 삭제

리스트.remove(값)
-> 반환값이 없음
-> 삭제할 값이 여러 개 있다면 가장 처음 나오는 것 1개만 삭제
-> 삭제할 값이 없다면 ValueError 발생

ValueError을 방지하기 위해서 remove 하기 전에 값이 있는지 확인 (if 값 in 리스트:)


3) 검색
- index 함수
리스트.index(값): 특정 값이 리스트에 몇 번 인덱스에 있냐?
-> 여러 값이 있다면 가장 먼저 나오는 인덱스
-> 없으면 ValueError 발생

       find 함수 (문자열) (없으면 -1)

- count 함수
리스트.count(값): 특정 값이 리스트에 몇 번 나오냐?


4) 기능 함수
- 리스트.reverse()
요소의 순서를 거꾸로 뒤집는 함수
단독으로 실행해야하는 함수

- 리스트.sort()
오름차순으로 정렬하는 함수
단독으로 실행해야하는 함수

- 리스트.sort(reverse=True)
내림차순으로 정렬하는 함수

- 리스트 = sorted(리스트)
오름차순으로 정렬하는 함수

- 리스트 = sorted(리스트, reverse=True)
내림차순으로 정렬하는 함수

-> sort를 할 때는 서로 비교가능한 것만 같이 들어있어야 한다

- 리스트.clear()
- del 리스트[:]
리스트의 요소를 모두 지우는 함수


5) 리스트 비었는지 확인
-> 비었으면 True, 아니면 False

- 리스트의 길이: len 함수
len 함수의 값이 0이면 비었다
not과 len 함수를 동시에 사용

- not과 리스트를 동시에 사용

-> 비었으면 False, 아니면 True
- not을 2번 쓴다


2. 리스트의 할당 vs 리스트의 복사

a = [1, 2, 3, 4]
b = a
print(a, b)
b[2] = 100
print(a, b)

[1, 2, 100, 4] [1, 2, 100, 4]

리스트에서 다른 리스트 변수로 값을 할당하면
값이 복사가 되는게 아니라 값의 메모리 주소를 넣는다

a ---> [1, 2, 3, 4]
b --->


a와 b를 완전히 다른 객체로 만들 때 copy 함수

a ---> [1, 2, 3, 4]
b ---> [1, 2, 3, 4]


객체 안에 객체가 있다 -> copy가 통하지 않음
(리스트 안에 리스트가 있으면 copy X)
-> copy.deepcopy(리스트)


3. 딕셔너리 자료구조

리스트, 튜플, range, 문자열 -> 시퀀스 (여러 값들을 일렬로 나열한다)
딕셔너리 -> 값끼리 연관이 생김

값을 연관 지을 때 :(콜론)
콜론 앞의 값을 key (키)
콜론 뒤의 값을 value (값)
-> 키-값 쌍 (key-value pair)
-> 키와 값은 1:1 대응
-> 키가 여러 개 있다면 그 중 가장 마지막에 쓴 값이 적용됨

딕셔너리에서 키에 해당하는 값을 가져올 때는
딕셔너리[키]

딕셔너리의 키에는 문자형, 수치형, 논리형 전부 가능
딕셔너리의 값에도 모든 값이 가능


4. 딕셔너리 기능

1) 빈 딕셔너리 만들기

a = {}
b = dict()

2) 딕셔너리 만들기

- 리스트로 만들기
딕셔너리 = dict(zip(키 리스트, 값 리스트))

- 키=값 직접 쓰기
키에는 문자열이더라도 따옴표를 쓰지 않음
딕셔너리 = dict(키1=값1, 키2=값2, ...)

- 튜플로 구성된 리스트로 만들기
딕셔너리 = dict([(키1, 값1), (키2, 값2)])

총 5개의 문자열을 입력 받음
딕셔너리
문자열을 키로 하고, 문자열의 길이를 값으로



3) 값을 추가하기

딕셔너리[추가할 키] = 추가할 값

딕셔너리.setdefault(키)
-> 키가 추가는 되는데 값이 None으로 설정

딕셔너리.setdefault(키, 값)
-> 키와 값이 쌍으로 추가


4) 값 확인하기

딕셔너리[키]

딕셔너리에 없는 키를 가지는 값을 가져오게 된다면 KeyError가 발생

in 연산자 / not in 연산자를 이용해서 특정 키 값이 딕셔너리에 존재하는지
-> 있으면 True, 없으면 False


딕셔너리.get(키) -> 값
딕셔너리.get(키, 값) -> 키가 없을 때 값이 나옴

if 특정키 in 딕셔너리:


5) 값 수정하기

딕셔너리[키] = 수정할 값

딕셔너리.update(키=수정할 값)
-> 키가 문자열일 때만 사용 가능한 용례
-> 키가 문자열이더라도 따옴표 X
-> 수정 뿐 아니라 추가 기능도 된다
-> 여러 값을 한 번에 추가/수정 가능

딕셔너리.update(딕셔너리)
딕셔너리.update(튜플의 리스트)
-> 키가 문자열이 아닐 경우 사용하는 방식


6) 키-값 쌍 삭제하기

딕셔너리.pop(키) -> 값이 출력되면서 삭제
-> 키가 없으면 KeyError가 발생

딕셔너리.pop(키, 값)
-> 키가 없으면 pop에 넣은 값이 나옴

del 딕셔너리[키]
-> 값이 삭제 됨
-> 키가 없으면 KeyError가 발생

딕셔너리.popitem()
-> 딕셔너리의 맨 뒤에 있는 키-값 쌍이 튜플 형태로 출력 + 삭제

딕셔너리.clear()
-> 모든 키-값 쌍을 삭제


7) 키-값 쌍 모두 가져오기

- 키만 다 가져오기: keys()
list(딕셔너리.keys())

- 값만 다 가져오기: values()
list(딕셔너리.values())

- 키-값 쌍 다 가져오기: items()
list(딕셔너리.items())
키와 값 쌍이 튜플형태

8) 딕셔너리에 있는 키의 갯수

len(딕셔너리)









