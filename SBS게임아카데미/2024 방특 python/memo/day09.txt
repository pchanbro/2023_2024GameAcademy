day09


1. 함수에서 여러 값 반환하기


def 함수이름(매개변수):
  return 반환값1, 반환값2, ...


-> 콤마로 구분해서 값을 여러 개 반환
-> 튜플의 응용


def 함수이름(매개변수):
  return [반환값1, 반환값2, ...]




2. 매개변수의 인수 사용하기
위치인수(매개변수의 인덱스 번호)
키워드인수(매개변수의 이름)


위치인수의 순서대로 값을 넣을 때에는 값을 직접 넣는 방식이 아니라 리스트나 튜플을 이용해 넣어도 됨
-> 리스트/튜플 언패킹 방식 사용
-> 리스트/튜플 앞에 *를 붙인다


위치인수를 사용할 때에는 리스트/튜플의 요소의 개수가 반드시 매개변수와 같아야 한다
(안맞추면 TypeError 발생)




3. 가변 인수 (variable argument)
위치인수 + 리스트언패킹 -> 가변 인수
= 매개변수의 개수가 정해지지 않았다


가변인수를 사용할 때에는 매개변수를 args로 작성하는 것이 관습 규칙 (arguments)


가변인수를 함수에 넣기 전까지는 값 들의 나열
함수에 넣고 난 후에 *args가 튜플로 변하는 것


-> 가변인수가 있는 함수에 리스트를 넣는다고 해서 해당 리스트가 풀려서 들어가지는 않는다
-> 리스트를 풀어서 넣고자 할 때는 반드시 리스트 언패킹을 해주어야 한다
-> 튜플도 반드시 튜플 언패킹을 해서 넣어야 한다




4. 고정인수와 가변인수를 함께 사용
- 고정인수는 필수 값
- 가변인수는 무조건 맨 뒤


- 함수(고정, *가변)
  -> 앞에 1개만 고정인수로 들어가고
     뒤에 나머지는 가변인수로 들어간다


- 함수(고정1, 고정2, *가변)
  -> 앞에 2개는 고정인수로 필수
     뒤에 나머지는 가변인수로 들어간다


- 함수(고정, *가변, 고정), 함수(*가변, 고정)
  => 불가능 (무조건 가변인수는 맨 뒤)




함수 이름: sumMultiply
함수 설명: 수치형으로 된 가변인수들의 합에 정수를 곱한다


매개변수
- 정수 1개
- 가변인수 1개: 수치형으로 이루어져있어야 함


반환값
- 정수 1개: 수치형으로 된 가변인수들의 합에 정수를 곱한 값


a = sumMultiply(4, 1, 2, 3, 4)
print(a) # 40




5. 키워드 인수


함수 호출 할 때에만 사용된다


함수이름(매개변수1=값1, 매개변수2=값2, ...)
-> 매개변수의 순서대로 넣을 필요 없이 매개변수의 이름으로 판단하기 때문에 순서가 섞여도 된다




6. 키워드 가변 인수
키워드 인수 + 딕셔너리 언패킹


kwargs -> keyword arguments


def 함수이름(**키워드가변인수):


함수이름(**딕셔너리) -> 딕셔너리 언패킹
함수이름(키1=값1, 키2=값2, ...)




7. 키워드 가변 인수와 고정 인수 함께 사용


- 고정인수는 필수 값
- **kwargs는 무조건 맨 뒤에 와야 함




8. 고정인수 + 위치가변인수 + 키워드가변인수


순서: 고정인수 -> 위치가변인수 -> 키워드가변인수


- 고정인수는 필수 값, 여러 개 와도 됨
- 위치가변인수, 키워드가변인수 1개




함수 이름: scoreAdd


매개변수
- 정수 1개: 학생 수
- 위치 가변인수 1개: 학생들의 이름
- 키워드 가변인수 1개: 과목들의 이름


반환 값
- 키가 학생의 이름이고, 값이 과목별 점수인 딕셔너리의 딕셔너리


상세 설명
함수 내에서 학생별 점수를 입력받음
James의 python 성적 입력 >>> 
James의 java 성적 입력 >>>
Kim의 python 성적 입력 >>>
...


a = scoreAdd(3, 'James', 'Kim', 'Lee', python=0, java=0, cpp=0, ai=0)
print(a)
{'James': {'python': 100, 'java': 90}, 'Kim': {~~~}, 'Lee': {~~~}}




함수 이름: getNameScore


매개변수
- 문자열 1개: 이름
- 키워드 가변인수 1개: scoreAdd에 대한 결과값


반환 값
- 정수 1개: 평균 값


상세 설명
학생 이름에 따른 성적의 평균을 반환




9. 전역변수


전역 (global) 영역에 속한 변수를 함수 내에서 쓰기 위해서는
함수 내에
global 변수이름
을 해야 함수 내에서 해당 변수에 접근할 수 있음