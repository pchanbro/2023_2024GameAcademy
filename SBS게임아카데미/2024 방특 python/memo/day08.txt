day08


1. 파일


1) 컴퓨터에서 파일을 생성
2) 코랩의 왼쪽 메뉴에서 파일 모양 누르기
3) 파일 드래그 & 드롭


open 함수: 파일을 여는 함수
open(파일이름, 모드)


'r' -> read 읽기 모드
'w' -> write 쓰기 모드




2. 파일 쓰기


1) 파일을 연다 (쓰기모드)
f = open(파일이름, 'w')


2) 문자열을 쓴다
f.write(문자열)


3) 파일을 저장한다
f.close() 




3. 파일 읽기


1) 파일을 연다 (읽기모드)
f = open(파일이름, 'r')


2) 읽는다
s = f.read()


3) 파일을 닫는다 (=메모리 누수 방지)
f.close()




4. 파일 자동으로 열고 닫기


with open(파일이름, 모드) as f(파일객체):
  코드




level.txt
99
저장해서 코랩에 업로드


level.txt 파일 읽어와서 레벨을 변수에 저장
저장한 변수를 1 올려서 level2.txt에 저장




5. 파일에 여러 줄 쓰기


파일에 여러 줄을 쓰기 위해서는 반드시 \n을 중간에 추가해야 함 (write 함수 사용하기)


리스트에 있는 문자열들을 한 번에 추가하는 방식 (writelines 함수)
- 문자열의 뒤에 \n을 추가해줘야 줄바꿈이 된다




6. 파일에서 여러 줄 읽기


파일의 내용을 줄바꿈을 기준으로 하여 리스트로 가져온다 (readlines 함수)


파일의 내용을 한 번에 한 줄 씩 여러 번 가져오기 (readline 함수)
- 파일에 문자열이 몇 개 있을지 모르기 때문에 반드시 while 반복문을 이용해 계속 받아야 함
- \n까지 가져오기 때문에 출력할 때는 rstrip('\n') 을 해야함


for문에 파일 객체를 넣어서 반복문을 돌면, 파일 객체에서 파일의 내용을 한 줄 씩 꺼내와서 변수에 저장


파일 객체에는 파일의 내용이 한 줄 씩 담겨 있기 때문에 list, tuple과 같은 시퀀스형 함수로 변환하면 한 줄 씩 저장이 됨




7. 피클링 (객체 저장하기) pickling
- 리스트, 튜플, 정수, 딕셔너리, 문자열


맨 위에 import pickle 을 써야 함


open(파일이름, 모드)
모드
'wb' -> write binary 바이너리 쓰기모드
pickle.dump(변수이름, 파일객체)




8. 언피클링 (객체 읽어오기) unpickling


open(파일이름, 모드)
'rb' -> read binary 바이너리 읽기모드
저장할변수 = pickle.load(파일객체)


저장한 순서대로 가져오기




9. 추가 파일 모드


r, w -> 텍스트 읽기, 덮어쓰기
rb, wb -> 바이너리 읽기, 덮어쓰기
a -> 파일에 추가하기 (추가모드)
x -> 파일이 있으면 쓸 수 없다고 오류 발생, 파일이 없으면 파일을 생성하고 파일을 작성 (배타적 생성(쓰기)모드)




<fruits.txt>
apple
banana
orange
mango
grape
blackberry


fruits.txt 파일을 읽어와서 5글자 짜리 문자열을 가져와서 하나의 리스트로 저장해서 알파벳 역순으로 출력


mango
grape
apple






아이디와 비밀번호를 저장하는 딕셔너리를 피클링


account.p -> 비어있는 딕셔너리


무한 루프


모드를 입력하세요 >>> 회원가입
아이디 >>> ~~~
비밀번호 >>> ~~~


아이디가 이미 있으면 -> 존재하는 아이디입니다.
아이디가 없으면 ->
account.p 를 가져와서
딕셔너리에 추가
다시 account.p 저장


모드를 입력하세요 >>> 로그인
아이디 >>> ~~~
비밀번호 >>> ~~~


account.p 를 가져와서
아이디가 없으면 -> 존재하지 않는 아이디입니다.
맞는지 확인
맞으면 -> ~~~님 환영합니다
틀리면 -> 비밀번호가 틀렸습니다




10. 함수 (function)


함수 = 특정 기능을 수행하는 코드들의 집합
- 코드의 용도를 구분할 수 있다
- 코드의 재사용을 할 수 있음 (= 코드의 중복을 줄인다)


def -> define의 줄임말 (정의하다)
코드의 묶음을 정의한다


def 함수이름(): -> 함수를 정의
  코드


함수이름() -> 함수를 호출




호이스팅 -> 선언을 나중에 해도 그 파일 안에 있다면 호출이 가능하다 (javascript)




pass 키워드를 사용해서 나중에 이 칸을 채우겠다 (=아무일도 하지 않는 칸)




11. 매개변수가 있는 함수 (parameter)


def 함수이름(매개변수1, ...): <- 함수의 정의
  코드


함수이름(매개변수값1, ...) <- 함수의 호출




12. 반환이 있는 함수 (return)


def 함수이름([매개변수]): <- 함수의 정의
  코드
  return 반환값 <- 함수를 부른 곳으로 값을 전달


변수 = 함수이름(...) <- 함수를 호출해서 값을 변수에 저장


반환 하는 값이 없으면 None을 리턴






13. 독스트링 (docstring) 명세


함수에 대한 설명을 붙여주는 문자열
-> doc(document) + string


주석을 쓰는게 아니라 문자열 -> 큰 따옴표 3개로


일반적으로 다른 사람들과 코드로 협업할 때 코드의 설명을 작성하는 용도로 사용


함수이름.__doc__
help(함수이름)




함수 이름, 함수 요약, 매개변수, 반환 값, 상세 설명
+ 이 함수가 어디에 사용되는지




함수 이름: repeatString
함수 요약: 문자열의 각 문자를 정수 번 반복
매개변수 1: 문자열
매개변수 2: 정수


반환값: 문자열 




반환값을 변수로 받아서 출력


<예시>


cafe
3


cccaaafffeee