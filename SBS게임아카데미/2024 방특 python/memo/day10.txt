day10

1. 람다 함수 (lambda function)

함수를 표현하기 위해서는 def 키워드를 사용
람다 함수를 사용하면 lambda 라는 한 줄 짜리 익명 함수를 사용

함수이름 = lambda 매개변수: 반환식
(함수로 사용될 변수)
- 람다 표현식 자체에는 이름이 없기 때문에 익명 함수 (anonymous function)


2. 람다 함수의 특징
- 자체 호출이 가능
(lambda 매개변수: 반환식)(인수)

- 람다 함수 내에서는 변수를 만들 수 없음
람다 함수는 변수 없이 식 한 줄로 표현하기 때문에 변수 선언이 불가능

변수가 꼭 필요하면 def 함수를 사용

람다 표현식 밖에 있는 변수는 사용 가능

- 매개변수가 생략은 가능하다


3. 람다 함수 자체를 다른 함수의 인수로 사용하기
- 간단하게 함수를 만들 수 있기 때문
- map 함수의 첫 번째 인자에 람다 함수를 넣어서 간략한 코드를 작성할 수 있음


4. 람다 함수의 조건부 표현식

lambda 매개변수: 참 if 조건 else 거짓

- else 비우면 안됨
- elif는 못 넣음

여러 조건을 넣을 때에는 else 뒤에 다시 if-else

lambda 매개변수: 참1 if 조건1 else 참2 if 조건2 else 거짓2


5. 람다 함수에는 여러 객체를 넣을 수 있음

map 함수에서 람다 함수와 함께 여러 객체를 한 번에 처리할 때에는 
lambda 매개변수1, 매개변수2: ~~~~
map에 매개변수를 처리할 개수만큼 객체를 넣으면 됨



a = [True, False, True, True, False]
b = [1, 2, 3, 4, 5]

map함수와 람다 함수를 이용해서 a 값이 True인 것의 위치에 해당하는 b는 문자열로, 아니면 그대로 

['1', 2, '3', '4', 5]


a = [3, 4, 5, 6, 7, 8, 9]
b = [1, 2, 3, 4, 5, 6, 7]

a 값이 3의 배수 -> a값 + b값
      나머지 1 -> a값 - b값
      나머지 2 -> a값 * b값

[4, 2, 15, 10, 2, 48, 16]


6. filter 함수

filter -> 특정 조건에 맞는 요소를 가져오기

map은 요소를 바꾸는 것 vs. filter는 요소를 가져오는 것


7. reduce 함수

from functools import reduce
<- 맨 위에 추가

- 객체의 각 요소를 지정된 함수로 처리한 후에 이전 결과와 누적한다


files = ['1.hwp', '10.jpg', '2.png', '3.gif', '4.png', '5.xlsx', '6.jpg', '7.docx', '8.jpg', '9.gif', 'jpg.xlsx']

확장자가 jpg 또는 png 인 파일만 가져오기


8. 예외 처리

예외(exception): 코드를 실행하는 중에 발생한 오류

예외처리의 기본: try-except 구문

try:
  실행할 코드
except:
  예외가 발생했을 때 처리하는 코드

- try와 except는 항상 같이 와야 함
- except가 있다면 오류를 띄우는 것이 아닌 except내의 코드 블럭을 실행

try:
  실행할 코드
except 예외이름:
  해당 예외에 따른 코드

-> except는 여러 개 올 수 있음


try:
  실행할 코드
except 예외이름 as 변수(e):
  해당 예외에 따른 코드

-> 변수를 이용하면 에러 메시지(에러 발생 시 에러 이름 뒤에 뜨는 설명)를 가져 올 수 있음

except as 에 쓰는 변수는 각 에러 블록 안에서만 사용되는 변수기 때문에 이름이 겹쳐도 된다


모든 예외를 포괄하고 있는 예외
(최상위 부모 클래스)

모든 예외를 설명하는 사이트 :https://docs.python.org/3/library/exceptions.html

BaseException: 최상위 부모 클래스
KeyboardInterrupt: 사용자가 중간에 종료
Exception: 프로그래밍 할 때 나올 수 있는 예외들의 부모 클래스
- ArithmeticError: 산술 오류
  * OverflowError: 파이썬 연산한계 초과
  * ZeroDivisionError: / 0
- AttributeError: 객체에 함수가 없는 경우
- EOFError: End Of File: 파일이 끝나면 발생하는 오류
- ImportError, ModuleNotFoundError:  import문-> 외부 파이썬 함수를 가져오는데, 해당 함수/모듈이 없는 경우
- OSError: 운영체제 관련 오류
- TypeError: 함수에서 매개변수가 틀렸거나
- ValueError: 자료형이 맞지 않거나, 텍스트를 해석할 수 없는 경우


9. else-finally 문

try:
  실행할 코드
except:
  예외시 코드
else:
  예외가 없을 때 코드
finally:
  예외랑 상관없이 항상 실행하는 코드

- else는 except 뒤에 와야하며, except와 짝이 맞아야 함
- else는 선택사항

- finally는 except나 else와 관계 없음
- finally로 선택사항


10. 예외 발생시키기 (custom exception)

raise 에러종류('에러메시지')

함수에서 예외를 발생시켜서 메인 스트림으로 예외를 넘긴다 

re-raise: 함수에서 발생시켜서 함수 내에서 처리했던 오류를 다시 메인 스트림으로 재발생시켜서 메인스트림에서도 오류를 처리하도록
-> 함수 내의 except 구문 내에서 raise 하면 메인스트림의 except에서 감지


11. assert
(테스트를 위한 오류)

AssertionError 발생시키는 assert 구문

assert 조건식, 거짓일때 발생할 에러메시지


12. 커스텀 오류 만들기

class 커스텀오류이름(Exception):
  def __init__(self):
    super().__init__(기본에러메시지)

raise 커스텀오류이름


커스텀 오류에 대해서 커스텀 에러메시지를 띄우려면
class 커스텀오류이름(Exception):
  pass

raise 커스텀오류이름(커스텀에러메시지)


문자열을 입력받음

뒤집었을 때 똑같은 문자열 -> palindrome
                       (팰린드롬)

try:
  word = input("단어 입력 >>> ")
  palindrome(word)
except NotPalindromeError as e:
  print("예외 발생!", e)

단어 입력 >>> level
level

단어 입력 >>> hello
팰린드롬이 아닙니다.







