day03

1. 자료형
자료 = data 형 = type
데이터 타입

파이썬 - 수치형(정수, 실수, 복소수), 문자형(str), 논리형

C언어 - 메모리를 할당받아서 데이터를 저장, 메모리를 얼마나 주느냐
문자형
char (character) - 1바이트 (-128 ~ 127)
'0' - 48, 'A' - 65, 'a' - 97, '가' - 44032

정수형
short - 2바이트 (-32768 ~ 32767)
int (integer) - 4바이트 (-2147483648 ~ 2147483647)
long - 8바이트 (-922경 ~ 922경)

실수형
float (floating point) - 4바이트 (+-3.4 * 10^38)
double - 8바이트 (+-1.7 * 10^308)

논리형
bool (boolean) - 1바이트 (1비트를 차지하지만 컴퓨터의 기본 표현 단위가 1바이트)
#include <stdbool.h>

기타
void - 빈 칸


2. 오버플로우와 언더플로우

short의 범위는 -32768 ~ 32767
short a = 40000;
-> 양수 방향으로 범위를 벗어났다 = 오버플로우 overflow

|                  ||       v         |
-32768         32767-32768 ~~~>
-32768 = 32768
-32767 = 32769
...
-25536 = 40000

short b = -40000;
-> 음수 방향으로 범위를 벗어났다 = 언더플로우 underflow


3. 변수(variable)와 상수(constant)
변수: 다양한 값을 저장할 수 있는 이름이 부여된 메모리 주소
  -> 변수의 선언과 동시에 컴파일러에게 이 변수의 메모리 크기만큼 공간을 할당 받음
상수: 프로그램에 의해서 변경되지 않는 고정 값
  -> 상수는 선언과 동시에 값을 할당 해야 함 (초기화)

변수 - 프로그램 실행 중에 값 변경 O
상수 -                      X

1) const 방식 (변수의 상수화)
double pi = 3.1415926;
-> const double PI = 3.1415926;
상수를 선언할 때에는 관습규칙으로 전부 대문자로 써준다
- 사용할 수 있는 범위(스코프, scope)가 정해져있음 (중괄호 블록 안에서만 쓸 수 있음)

2) 전처리기 방식
#~~~ -> 전처리기
#define: 매크로 상수 -> 매크로 값으로 대치하여 프로그램에서 사용
#define PI 3.1415926
-> 문장이 아니기 때문에 끝에 세미콜론이 없음
-> 자료형도 없음
- 해당 파일 전체에서 쓸 수 있음 (맨 위에 쓰기 때문)

https://cplusplus.com/reference/climits/ -> limits.h에 정의된 매크로 상수


4. 메모리 주소

메모리의 영역
낮은 주소
- 코드(code) 영역
  -> 작성한 코드
- 데이터(data) 영역
  -> 프로그램이 사용하는 데이터, 전역변수, static 변수
- 힙(heap) 영역
  -> 개발자가 필요할 때 사용하는 공간 (코드를 실행하면서 작성하는 데이터, 생성되는 데이터)
- 스택(stack) 영역
  -> 코드를 컴파일 할 때 사용하는 공간 (지역변수, 매개변수, 반환값, 반환주소 등)
높은 주소

변수를 선언
- 일반적으로 스택 영역에 저장 된다
(스택 영역)
지역 변수 local variable: main, 함수 안에 선언된 변수
- 공간이 부족하기 때문에 메모리가 계속 재활용이 됨
  -> 변수를 초기화를 하지 않고 저장하면 우리가 원하지 않는 값이 저장되어 있음
     (쓰레기 값, garbage)

(데이터 영역)
- 전역변수 global variable, static 변수
  -> 초기화를 안해도 자동으로 0으로 초기화 됨


5. 자료형 수정자 (data type modifier)
- 수정자의 종류: short, long / signed, unsigned
- int의 범위 -21억 ~ 21억 ==> 0 ~ 42억

short, long
	32비트 	64비트
short	2byte	2byte -> short (int)
int	4byte	4byte
long	4byte	8byte -> long (int), long (double)


signed, unsigned
sign -> 부호 (+/-)

signed -> 부호가 있는 값: int 나 signed int나 같은 자료형
char [7][6][5][4][3][2][1][0]
7번째 비트가 MSB(Most Significant Bit) -> 최상위 1비트, 부호를 표현
(0: 양수, 1: 음수)

unsigned -> 부호가 없는 값: 정수, 문자에 대해서만 적용이 가능
char [7][6][5][4][3][2][1][0]
-> 8비트 전체를 데이터를 표현하는데 사용 (양의 정수의 표현 범위가 2배)
-> 음수가 필요 없는 값을 쓸 때 주로 unsigned 를 사용

int, char: %d
unsigned int, char: %u
short int: %hd
unsigned short int: %hu
long long int: %lld
unsigned long long int: %llu
double: %f
long double: %Lf
int64_t: %jd
uint64_t: %ju


6. 리터럴 상수

접미사
L  -> long        -> 100L
LL -> long long   -> 100LL
F  -> float       -> 3.14F
L  -> long double -> 3.14L


7. sizeof 연산자

자료형의 크기를 계산해서 정숫값으로 반환

sizeof() -> "%zd" 또는 "%zu"


8. 서식 지정자

정수
%nd: n칸 기준 오른쪽 정렬
%+nd: n칸 기준 오른쪽 정렬 + 양수면 앞에 부호(+) 붙임
%-nd: n칸 기준 왼쪽 정렬
%0nd: n칸 기준 오른쪽 정렬 + 남은 칸에 대해서 0을 채움

실수
%f: 소수점 6자리까지 반올림
%.nf: 소수점 n자리까지 반올림
%m.nf: 소수점 n자리 + m칸 기준 오른쪽 정렬
%+m.nf: 소수점 n자리 + m칸 기준 오른쪽 + 양수면 부호 (+)
%-m.nf: 소수점 n자리 + m칸 기준 왼쪽
%0m.nf: 소수점 n자리 + m칸 기준 오른쪽 정렬 + 남은 칸에 0을 채움

문자열
%ns: n칸 기준 오른쪽 정렬
%-ns: n칸 기준 왼쪽 정렬








