day10

1. 동적 메모리 할당

vs. 정적(static) 메모리 할당 = 배열
배열을 만들 때 배열의 크기를 지정한다 = 정적

배열의 크기를 지정할 때 배열에 들어올 수 있는 데이터들의 가장 큰 크기로 지정
--> 메모리의 낭비가 발생할 수 있음
==> 동적 메모리 할당으로 프로그램을 실행할 때마다 필요시에 메모리를 할당


정적 메모리 할당 - 프로그램이 컴파일 될 때 메모리가 할당
vs
동적 메모리 할당 - 프로그램이 컴파일 될 때가 아닌 런타임(실행중)에 메모리가 할당
= 주소가 고정이 아님 -> 포인터를 통해서만 접근할 수 있음
= 메모리의 힙 영역에 저장됨

코드 영역 -> 프로그램의 코드가 저장되는 영역
데이터 영역 -> 전역변수와 static 변수
힙 영역 -> 프로그래머가 원하는 시점에 메모리를 할당
스택 영역 -> 지역변수와 함수의 매개변수

#include <stdlib.h>
프로그래머가 관리하는 공간 -> 직접 메모리를 할당한다 -> memory allocation -> malloc 함수
메모리 할당 해제 -> 메모리에 자유 공간을 부여 -> free 함수


2. 동적 메모리 할당 함수

1) void* malloc(size_t size);

malloc() 함수의 매개변수로 크기(byte 단위)를 넘겨줌
운영체제에서 힙 영역에서 비어있는 영역을 검색해서 매개변수 만큼의 크기를 할당하고 시작주소를 반환

메모리가 부족할 경우 또는 size=0인 경우 -> NULL (널 포인터)

void* 자체로는 사용할 수 없음 -> int*, double*, char* 등 자료형을 붙인 포인터로 자료형 변환을 해야 함


2) void free(void* ptr);

free() 함수의 매개변수로 malloc, calloc, realloc으로 만들어낸 주소를 받음
받은 영역의 할당을 해제: 할당한 영역은 무조건 전체를 해제 (일부만 해제할 수 없음)
해제된 영역은 다른 영역에게 재할당 할 수 있음


3) void* calloc(size_t num, size_t size);

num * size 만큼의 크기(byte 단위)를 할당 + 공간을 0으로 초기화 한다
-> 런타임의 시간이 낭비될 수 있음

malloc 함수 + memset 함수를 사용하는 것이 낫다


4) void* realloc(void* ptr, size_t size);

이미 할당되어있는 영역을 다시 size만큼 재할당해서 시작 영역의 주소를 반환
-> 기존에 저장되어있던 데이터를 그대로 복구
-> 기존에 할당받은 영역의 크기가 부족한 경우, realloc으로 크기를 더 크게 할당받는다


3. 동적 할당으로 2차원 배열 만들기

1) int** p = (int**)malloc(sizeof(int*) * 행의 크기);
   -> 각 행별로 주소 지정

2) 각 행에 대해서: p[i] = (int*)malloc(sizeof(int) * 열의 크기);
   -> 각 행의 주소에 열만큼의 크기 지정

3) 열을 0으로 초기화: memset(p[i], 0, sizeof(int) * 열의 크기);


Array2D.c

행의 크기 >>> 5
열의 크기 >>> 3

malloc과 memset을 이용해서 5행 3열짜리 2차원 배열 만들기 + 0으로 초기화

0 1 2
1 2 3
2 3 4
3 4 5
4 5 6

Array3D.c

입체 크기 입력 >>> 
행 크기 입력 >>> 
열 크기 입력 >>> 

1) 트리플 포인터로 입체의 크기 결정
2) 각 입체 별로 행의 크기 결정
3) 각 행 별로 열의 크기 결정


4. 파일 입출력

#include <stdio.h>

1) 파일 열기
FILE* 파일포인터 = fopen(파일이름, 파일모드);
파일 열기에 실패한 경우, NULL(널 포인터)가 들어감

파일 모드
'r' -> 읽기 모드 (read) -> 파일이 반드시 있어야 함
'w' -> 쓰기 모드 (write) -> 새 파일 생성하면서 쓰기, 파일이 존재하면 덮어쓰기
'a' -> 추가 모드 (add) -> 새 파일 생성하면서 쓰기, 파일이 존재하면 이어쓰기

't' -> 텍스트 모드 (text) -> 일반적인 글씨 작성
'b' -> 바이너리 모드 (binary) -> 특수 파일의 값을 그대로 읽어옴

2) 파일 쓰기
fprintf: file print format
fprintf(파일포인터, printf와 동일);
파일포인터 자리에 stdout을 쓰면 -> 표준 출력 (콘솔에 출력)

fputs: file put string
fputs(문자열, 파일포인터);

fwrite: file write
fwrite(문자열, 문자열의크기, 횟수, 파일포인터);

3) 파일 읽기
fscanf: file scan format
fscanf(파일포인터, scanf와 동일);
파일포인터 자리에 stdin을 쓰면 -> 표준 입력 (콘솔에서 입력)

fgets: file get string
fgets(문자열, 문자열의크기, 파일포인터);

fread: file read
fread(문자열, 문자열크기, 횟수, 파일포인터);

4) 파일 닫기 - 파일포인터는 열었으면 항상 닫아줘야 한다.
fclose(파일포인터);


StudentFile.c

STUDENT 구조체
- 이름 char name[20];
- 나이 int age;
- 성적 double grade;

student.txt에
James
30
4.5
작성

student.txt를 읽어와서 STUDENT 구조체 변수에 값들을 저장 후 출력











