day09

1. 문자열 처리 함수 (2)

1) strstr 함수: string search string
-> char* strstr(const char* str1, const char* str2);
str1에서 str2가 처음 나타나는 위치 (주소)
str2가 없다면 NULL(0, 널 포인터)을 반환


2) strupr: string upper
   strlwr: string lower 함수
-> char* strupr(char* str);
   char* strlwr(char* str);
-> 문자열을 통째로 대문자/소문자

3) tolower, toupper
-> int toupper(int c);
   int tolower(int c);
-> 문자 하나하나를 대문자/소문자

4) memset 함수
-> memory setting
배열에 대해서 값을 초기화 (0, -1)
memset(배열, 0, sizeof(배열))


2. 구조체
원래 변수는 하나의 변수에는 하나의 자료형
자료형이 다른 값 여러 개를 저장할 수있는 새로운 자료"구조" -> "구조"체 (structure)

// 원래
char name[20];
int age;
double grade;

위의 3개의 자료형을 하나로 묶어서 임의의 자료구조

구조체 선언
struct student {
  char name[20];
  int age;
  double grade;
};

struct 구조체이름 {
	일반적인 변수 선언하듯이
}; <- ; 주의

struct 구조체이름 <-- 자료형의 이름

구조체 변수 선언

1) 새로운 자료형의 변수를 만들기 위해서는 {} 가 끝난 다음에 변수 이름; 
구조체의 선언과 동시에 변수도 함께 선언
struct student {
  char name[20];
  int age;
  double grade;
} s1, s2;

2) 구조체 선언과 변수 선언이 별개인 경우
구조체 선언은 위와 동일하게 하는데
struct student s1, s2;


구조체 멤버 변수 접근
1) "구조체변수.멤버변수" 로 접근
s1.age = 20;
s2.grade = 4.5;
strcpy(s1.name, "Kim");

2) 한 번에 초기화 하기
배열 초기화 하듯이 구조체 멤버 순서대로 작성
struct student s1 = {"Kim", 20, 4.5};


구조체 안에는 어떤 종류의 변수든 전부 넣을 수 있음
(배열, 포인터, 구조체...)

구조체 변수는 초기화를 하지 않으면 0으로 초기화 됨


3. 구조체 배열 & 포인터
- 구조체 배열: 여러 개의 구조체 변수를 선언할 때
- 구조체 포인터: 구조체의 주소를 알고 싶을 때

int a = 10;
int* p = &a;

struct student s = {"Kim", 30};
struct student* q = &s;

*p = 20; // 일반 변수

(*q).age = 40; 
연산자 우선순위 때문에 ()를 치고 .으로 접근 
하지만 이런식으로 접근하면 복잡해진다.
q->age = 40;
구조체포인터->멤버변수를 이용해서 접근


4. typedef 연산자
- 기존에 존재하는 자료형의 이름을 새롭게 정의
typedef unsigned long long int uli;

typedef struct point {
  int x, y;
} POINT;


5. 구조체의 크기
구성하고 있는 자료형들 중 가장 큰 바이트 기준으로 해서
여백을 채워나간다

* 프로그램의 메모리를 절약하고자 할 때
  구조체 내의 변수들의 순서를 바꿔서 저장

int + int -> 8byte
char + char -> 2byte

int(4) + char(1+3) -> 8byte
char(1+3) + int(4) -> 8byte

char(1+3) + int(4) + short(2+2) -> 12byte
int(4) + short(2) + char(1+1) -> 8byte

int + short + char + double + int
-> 가장 큰 바이트는 double(8)

int(4)+short(2)+char(1)+여백1
double(8)
int(4)+여백4
-> 24byte


6. 공용체 (union)
-> 구조체와 비슷하지만 내부의 멤버들이 서로 메모리를 공유
(멤버들끼리 같은 메모리 주소를 가진다)








