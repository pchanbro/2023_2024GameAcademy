day02

1. scanf

출력 -> putchar, puts, printf
입력 -> getchar, gets(X) fgets, scanf

scanf -> 표준 함수 -> 표준 라이브러리 stdio.h (standard + io)

printf("형식", 변수/값);
scanf("형식", &변수);
-> 변수의 메모리 주소에 저장 (& : 변수의 메모리 주소)
-> """문자열은 &를 붙이지 않는다"""

정수 %d, %lld / 실수 %f, %lf / 문자 %c, %s

Visual Studio에서 scanf를 원활하게 사용하기 위해서는

#pragma warning(disable:4996)
-> 4996번 오류(scanf)를 무시해라

#define _CRT_SECURE_NO_WARNINGS


2. 입출력 버퍼

입력함수를 통해서 입력 받는 데이터는 입력 버퍼에 저장이 됨
입력 버퍼는 Enter키가 입력 될 때 프로그램으로 전달이 됨

출력함수를 통해서 출력 되는 데이터는 출력 버퍼에 저장이 됨
바로 콘솔로 출력이 됨

1 -> enter(10) -> 3.14 -> enter(10)
%d                %lf      %c

버퍼 비우기 -> 문자와 문자 입력 사이
while(getchar() != '\n');


3. 산술 연산자 (Arithmetic Operator)

모든 식은 연산자와 피연산자로 구성
a + b -> 연산자 +, 피연산자 a b
        (operator) (operand)
피연산자가 2개 있는 경우 -> 이항 연산자 (binary operator)
피연산자가 1개 있는 경우 -> 단항 연산자 (unary operator)

+ 덧셈
- 뺄셈, 부호
* 곱셈
/ 나눗셈 (몫)
% 나머지


4. 증감 연산자

변수를 1 증가 + 1 감소 연산자

++ -> 증가 연산자
-- -> 감소 연산자

a = a + 1   a += 1 
-> 이 방식들보다 a++ 컴파일 속도가 더 빠름 


전위형 (prefix)
-> 연산자가 변수 앞에 있다
 ++a, --a
1) 변수의 값에 대해서 먼저 증감 연산 시행
2) 변화된 변수에 값이 연산식에 반영

후위형 (postfix)
-> 연산자가 변수 뒤에 있다
 a++, a--
1) 변수의 값이 연산식에 반영
2) 변수의 값에 대해서 증감 연산 시행


int x = 5;
int y = 10;
printf("-x++ + ++y = %d\n", -x++ + ++y);
// 1) ++y -> 11
// 2) -x  -> -5
// 3) +   -> 6
// 4) 출력 -> 6
// 5) x++  -> 6
printf("%d %d\n", x, y);

산술과 증감 사이의 우선순위
1) 전위증감연산자
2) 음수/양수 표현
3) 산술연산자
4) 후위증감연산자


5. 비교연산자

두 변수나 식을 대소/동등 비교 -> 이항 연산자 (binary operator)

대소 비교: > 초과, < 미만, >= 이상, <= 이하
이상 이하 할 때 등호는 뒤에 나옴 (=> =< X)

동등 비교: == 같다, != 다르다
같다 기호는 =이 2개 (=이 1개 -> 대입 기호)


비교연산자의 결과 -> bool형 (true, false) 
 => 전부 소문자로 작성

bool을 출력하기 위해서는 %d를 이용해 0(=false)과 1(=true)로 출력이 됨


6. 논리 연산자

논리 값들을 연산해서 논리 값을 만들어냄

AND 연산 -> && (그리고) -> 이항
OR 연산  -> || (또는) -> 이항
NOT 연산 -> ! (아니다) -> 단항

&&는 양 항 모두 true일 때만 true
true && true -> true ******
true && false -> false
false && true -> false
false && false -> false

||은 양 항 모두 false일 때만 false
true || true -> true
true || false -> true
false || true -> true
false || false -> false ******

! 뒤집기
!true -> false
!false -> true



우선순위

높음
() 
!, ++, --
*, /, %
+, -
>, <, >=, <=
==, !=
&&
||
낮음


7. 비트 연산자 (bitwise operator)
2진수를 다루는 연산자
1바이트(byte) = 8비트(bit)

& -> 비트 AND: 양 비트가 1이면 1, 나머지 0
| -> 비트 OR: 양 비트가 0이면 0, 나머지 1
^ -> XOR: 같을 때 0, 다르면 1
~ -> NOT: 뒤집기

  9 1001   9 1001   9 1001
& 5 0101 | 5 0101 ^ 5 0101 ~ 5 0101
-------- -------- -------- --------
  1 0001  13 1101  12 1100  10 1010

int -> 32비트 -21억~21억

  5 0 000 .... 0101
 -6 1 111 .... 1010

 2 0000 .... 0010
 1 0000 .... 0001
 0 0000 .... 0000
-1 1111 .... 1111
-2 1111 .... 1110
-6 1111 .... 1010


8. 비트시프트연산자 (bitshift operator)
2진수를 이동시키는 연산자

>> -> right shift -> 원래 있던 비트로 채운다
<< -> left shift -> 0으로 채운다
(>>> -> 0으로 채운다)

9 >> 2 = 9 / (2^2) = 9 / 4 = 2.25 -> 2
0000 .... 1001
0000 .... 0100
0000 .... 0010 -> 2

-10 >> 2 = -10 / (2^2) = -2.5 -> -3
1111 .... 0110
1111 .... 1011
1111 .... 1101 -> -3

9 << 2 = 9 * (2^2) = 9 * 4 = 36
0000 .... 1001
0000 .... 1 0010
0000 .... 10 0100 -> 36

-10 << 2 = -10 * (2^2) = -10 * 4 = -40
1111 .... 0110
1111 .... 0 1100
1111 .... 01 1000 -> -40


9. 삼항 연산자 (ternary operator)
(비교+논리식)?(참):(거짓)










