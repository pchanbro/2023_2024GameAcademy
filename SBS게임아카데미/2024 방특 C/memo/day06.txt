day06

1. 함수

- 표준 라이브러리에서 제공하는 표준 함수: printf, scanf
- C언어 프로그램에서 starting point: main 함수
- 개발자가 필요에 의해서 작성하는 함수: 사용자 정의 함수

int main(void) {  반환형태 함수이름(입력형태(매개변수))
    코드
}

반환형태 X  매개변수 X -> 단독 동작 함수
void hello(void) {
}

반환형태 X  매개변수 O -> 매개변수를 받아서 단독 동작 함수
void hello(int count) {
}

반환형태 O  매개변수 X -> 함수 내에서 데이터를 생성하는 함수
int a(void) {
}

반환형태 O  매개변수 O -> 데이터를 받아서 가공 후 데이터를 반환
int add(int a, int b) {
}


2. return

return -> 값을 돌려준다 + 함수를 빠져나간다

반환형태가 있는 경우 -> 값을 돌려주는 용도
int main 함수 return 0; -> 에러를 판별해주는 용도

void 반환형태에서는 값을 돌려주는 것이 없음 -> return;
-> 뒤에 코드가 있더라도 함수를 종료한다 (=반복문에서의 break와 비슷한 용도)

return은 무조건 마지막에 쓰는 것이 아님 -> 중간에 함수를 나갈 수도 있음




함수를 사용할 때는 함수가 미리 정의되어 있어야 사용 가능함
- scanf, printf도 맨 위에 전처리기로 #include <stdio.h> 했기 때문에 사용 가능
- 사용자 정의 함수도 사용할 곳 위에 정의를 해야 사용 가능
  -> 위에 다 쓰기 때문에 main까지 찾아가기 힘듬, 어떤 함수가 있는지 한 눈에 보기 힘듬
=> ***함수의 원형 선언*** (원형 = 원래 형태)
   -> main 위에 함수의 요약을 작성: 반환형태 함수이름(입력형태);
   -> main 아래에 함수의 내용을 작성


3. 변수

- 지역 변수 (local variable): 함수 내 또는 스코프{} 내에서 선언되는 변수
- 전역 변수 (global variable): 함수 밖에서 선언되는 변수
- 정적 변수 (static variable): 함수 내/외 전부 가능
- 레지스터 변수 (register variable): 선언할 때 제약사항이 많음

1) 지역 변수
- 중괄호 안에 쓰면 모두 지역변수
- 스코프를 벗어나면 사용할 수 없음
- 스코프가 다르면 같은 이름의 변수더라도 다른 취급
- 메모리의 스택 영역(=공간이 작음)에 저장
- 지역 변수는 초기화를 안하면 쓰레기 값이 저장됨

{
  int a;
}
{
  int a;
}

스택 영역
+-------------------------
|main::num 
+-------------------------


2) 전역 변수
전역 = 전체 영역
- 프로그램이 처음 실행되면 데이터 메모리 공간에 할당
- 프로그램이 종료 될 때까지 남아있음
- 초기화를 안하면 0으로 자동 초기화
- 프로그램의 어디서든 접근이 가능
* 전역변수를 많이 사용하면 코드가 복잡해짐 + 보안

전역변수와 지역변수가 이름이 같을 경우
- 변수를 사용하는 지역의 스코프에 따라서 다르게 사용
global::num과 main::num이 있을 경우, main 내에서는 main::num을 사용
다른 함수에서는 global::num을 사용
- 차라리 이름을 다르게 하는게 좋다


3) static 변수
- 선언된 스코프 내에서만 접근 가능 (=지역변수의 특징)
- 1번 초기화 되고 프로그램 종료시까지 메모리 공간에 존재 (=전역변수의 특징)


4) register 변수
- CPU에서 값을 저장할 수 있는 가장 작은 유닛 = 레지스터
- CPU에 값을 저장하는 변수
  -> 연산 속도가 빠르다
  -> 메모리에 저장되지 않기 때문에 주소를 알 수 없다
  -> 전역 변수로 사용할 수 없음
- 임베디드 소프트웨어에서 주로 사용
  (연산속도가 매우 중요하거나, 메모리 용량이 작은 곳)


