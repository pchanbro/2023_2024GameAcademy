day05

1. 반복문
- 일정한 조건에 따라서 동일한 코드를 여러 번 반복하여 수행

- while 반복문
  * 조건에 따라서 반복 여부를 결정
  * 반복 횟수가 최소 0회
- do-while 반복문
  * 조건에 따라서 반복 여부를 결정
  * 반복 횟수가 최소 1회
- for 반복문
  * 횟수를 지정 + 조건도 가능


2. while 문
while - 하는 동안 = 조건이 만족할 동안

while(조건식) {
  조건식이 참일 동안 실행
}

한 문장이면 중괄호 생략 가능

while문 조건이 계속해서 만족할 경우 -> 무한 루프 발생
탈출조건이 만족하지 않으면 while문이 종료된다


무한루프에 넣을 수 있는 조건
1) true -> stdbool.h 필요
2) 정수형: 0이 아닌 모든 수
3) 실수형: 0.0이 아닌 모든 수
4) 문자형: '\0'이 아닌 모든 문자 c언어에서는 빈 문자열('')는 못온다 대신 '\0'을 써서 false역할을 함


3. do-while 문 마지막 세미콜론에 주의

do-while문 = 조건이 만족하는 동안

do {
  반복수행
} while(조건식); 마지막 세미콜론에 주의

- 무조건 1회 이상 수행
- 우선 반복을 수행하고 그 다음에 조건식을 확인한다


NumberSum.c

정수를 계속 입력받는 동안
입력받는 정수들 중에서 양수 들의 합을 구함

종료 조건은 음수 또는 0이 3번 나오면 종료

정수 입력 >>> 1
정수 입력 >>> 3
정수 입력 >>> -5
정수 입력 >>> 4
정수 입력 >>> 0
정수 입력 >>> 3
정수 입력 >>> 0
종료
합은 11입니다.


CharSum.c

문자를 1개씩 입력
대문자, 소문자를 입력
숫자 나오면 종료
대문자와 소문자의 개수

문자 입력 >>> A
문자 입력 >>> a
문자 입력 >>> B
문자 입력 >>> b
문자 입력 >>> C
문자 입력 >>> 3
종료
대문자 3개, 소문자 2개


4. for 반복문

for ~동안, ~에 대하여

파이썬: for 변수 in 시퀀스
C언어: 
for( 초기식 ; 조건식 ; 반복후작업(변화식) ) {
  수행문
}

초기식 -> 조건식 -(true)-> 수행문 -> 반복후작업 -> 조건식
              -(false)-> 종료

int i = 0;
for(i=0 ; i<2 ; i++) {
  printf("%d", i);
}

출력: 01

- 초기식과 반복후작업은 콤마(,)로 구분하여 여러 문장을 쓸 수 있다
- 조건식은 &&나 ||을 이용하여 여러 조건을 묶을 수 있다

for(int i=0 ; i<3 ; i++) {  <---- i변수는 for문 내에 선언 = for문에서만 사용 가능
}

for(;;) ≡ while(true) <--- 조건식을 비운다 = 무한루프
for(;i<3;) ≡ while(i<3) <--- 조건식만 쓰면 while과 동일


5. 중첩 반복문

일반적으로 2차원 평면을 표현하고자 할 때
바깥쪽 반복문 -> 행
안쪽 반복문 -> 열

     \t
2*1=2 2*2=4 2*3=6 ... 2*9=18
3*1=3 ................ 3*9=27
...
9*1=9 ................. 9*9=81


2*1=2 3*1=3 .... 9*1=9
2*2=4
...
2*9=18 .......... 9*9=81


Counting.c

무한루프 (while, for, do-while)
-> 종료 수를 입력하세요 >>>
-> 배수를 입력하세요 >>> 
-> 1부터 종료 수까지 중에서 배수만 출력
(for를 쓰면 편함)

종료 수를 입력하세요 >>> 20
배수를 입력하세요 >>> 3
3 6 9 12 15 18
종료 수를 입력하세요 >>> 24
배수를 입력하세요 >>> 5
5 10 15 20
종료 수를 입력하세요 >>> 0
종료되었습니다.


별 찍기
Star.c

별의 줄 수 입력 >>> 5
*
**
***
****
*****


6. break, continue

반복문을 제어하는 구문

break -> 부수다
***가장 최근***에 들어온 반복문을 부수고 나간다
코드가 아래로 이동
for(){
  while(){
    break; -> while문만 나간다

continue -> 진행하다
다시 돌아간다
for, while은 코드가 위로 이동 / do-while은 코드가 아래로 이동
for(초기식;조건식;반복후작업)
-> for문 내에서 continue를 만나면 반복후작업으로 이동

while(조건식), do-while(조건식);
-> 반복문 내에서 continue를 만나면 조건식으로 이동




소수 체크 방식 1
2부터 루트(나)까지 보면서 나누어떨어지면 소수가 아니다

소수 체크 방식 2
에라토스테네스의 체
  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19  20
  X  X  X  X  X  X  X  X  X   X   X   X   X   X   X   X   X   X   X  

체크 안되어있으면 소수 -> 2 3 5 7 11 13 17 19

일반적인 소수체크방식(2부터 나까지 보면서 나누어떨어지면 소수가 아님)
보다 에라토스테네스의 체 방식이 n배는 빠르다.








