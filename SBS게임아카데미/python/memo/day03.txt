day03

1.리스트

변수가 많아 전부 만들기 힘든 경우
리스트는 목록형이기 때문에 값을 나열하기 편하다

리스트 만들기

리스트변수 = [](대괄호)
-> 리스트 안의 값을 요소(element)라고 부른다

리스트에는 여러 가지 자료형을 저장할 수 있다.

*무조건 값을 구분할 때에는 , 로 구분해야 한다.

SyntaxError 란 것은 문법 혹은 구문이 틀렸다는 것(짝이 맞지 않다)
ex) c = [       ->대괄호를 빼먹었거나
c = [30 40]    -> 컴마를 빼먹었거나


빈 리스트를 만드는 2가지 방법
1) []  (그냥 대괄호만 쓴다 대괄호 사이에 값을 안 집어 넣는 경우)
a = []
-> 개발자가 직접 비어있는 값을 넣어준다

2) list()   
list 함수를 이용하는 방식(이 땐 소괄호를 써야함에 주의)
-> 파이썬에서 빈 리스트를 지정해준다


2. range를 이용한 리스트 만들기

range -> 범위

0부터 5까지의 범위 리스트
range(n) -> 0부터 n"미만"dml dusthrehls stnemf
range(6) -> 0, 1, 2, 3, 4, 5

5부터 10까지 범위의 리스트
range(n, m) -> n이상 m "미만"의 연속된 수들
range(5, 11) - > 5, 6, 7, 8, 9, 10

4부터 10까지의 2씩 증가하는 범위의 리스트
range(n, m, k) -> n 이상 m 미만 k 씩 증가
range(4, 11, 2) -> 4, 6, 8, 10
range(10, -1, -1) -> 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0

range는 값을 가지고만 있다
print(range(6))
-> range(0, 6)

표현을 하려면 리스트로 따로 바꿔줘야 함



3. 튜플(tuple)

리스트와 같이 요소를 일렬로 저장

vs. 리스트
- 안에 있는 요소를 변경, 추가, 삭제할 수 없다. 즉, 튜플은 읽기 전용 리스트이다
- 튜플은 () (소괄호)를 이용하여 표현 (근데 굳이 소괄호를 안써도 됨)***

값이 1개 들어있는 튜플
-> (값,)   값,

4. 리스트 <-> 튜플 변환

리스트 -> 튜플 : 읽기 전용으로 변환
튜플 -> 리스트 : 수정 가능하도록 바꾸기

튜플에서 값을 수정하려고 하면 TypeError가 발생(튜플은 값을 수정할 수 없다)



5. 문자열 <-> 리스트, 튜플

문자열 -> 리스트 : list(문자열)
문자열 -> 튜플 : tuple(answkduf)
리스트, 튜플 -> 문자열 : ' '.join(리스트, 튜플)


6. 리스트, 튜플 언패킹 (list, tuple unpacking)
리스트아 튜플의 요소를 변수 여러 개에 할당하는 것
a = [1, 2, 3] <- 패킹
x, y, z = a   <- 언패킹


list, tuple, range를 사용해서
튜플 -10, -7, -4, -1, 1, 4, 7, 10 을 만들기

a = list(range(-10,0,3))
b = list(range(1, 11, 3))
c = tuple(a+b)
print(c)
-> (-10, -7, -4, -1, 1, 4, 7, 10)

7. 리스트/튜플 연산자

1) in/not in 연산자
리스트/튜플 안에 요소가 존재하는지

요소 in 리스트/튜플
요소 not in 리스트/튜플

2) 연결 (+) 연산자
리스트 + 리스트 -> 리스트
튜플 + 튜플 -> 튜플
문자열 + 문자열 -> 문자열
range는 +를 이용해 합칠 수 없다.(TypeError)

3) 반복(*) 연산자
리스트 * 수 -> 리스트 반복 가능
튜플 * 수 -> 튜플 반복
range는 *를 이용해 반복할 수 없음(TypeError)

4) len() 함수
len(리스트, 튜플, range, 문자열)

5) 인덱싱 (indexing)
리스트, 튜플, range, 문자열[인덱스번호]
시퀀스 자료형에서 요소의 위치를 나나태는 것
*** 시작번호가 0이다 ***
-> 인덱스 번호는 n번째 - 1
-> 마지막 인덱스는 len() - 1

6) 슬라이싱(slcing)
리스트, 튜플, range, 문자열[인덱스번호]

시퀀스 자료형에서 연속된 요소들을 가져오는 것
리스트[n:m] -> n부터 m미만
리스트[n:m:k] -> n부터 m미만 k씩

7) 값 할당하기(리스트 O, 튜플X, range X, 문자열 X)
값 할당을 리스트만 가능하다

a[인덱스] = 값

튜플, range, 문자열에 값을 할당 -> IndexError
인덱스의 값을 넘어서서 할당 -> IndexError

튜플 -> 리스트 변환 -> 값 할당 -> 튜플 변환
문자열 -> 리스트 변환 -> 값 할당 -> 문자열 변환

8) 값 삭제하기

delete -> del 연산자

del 리스트[인덱스번호]

튜플 -> 리스트 -> 삭제 -> 튜플
문자열 -> 리스트 -> 삭제 -> 튜플

9) 슬라이싱을 이용한 요소 할당
슬라이싱을 이요한다는 것은 범위를 지정한다는 것

시퀀스[시작: 끝] = 시퀀스

- 개수가 같을 필요는 없다. (줄어들기O, 늘어나기O)
- 형태가 시퀀스면 다 된다. (단 앞쪽의 형태로 통이리 됨)

리스트[시작:끝] = 튜플, 문자열, range
-> 튜플, 문자열, range이 아닌 리스트 형태로 저장이 된다.

시퀀스[시작: 끝 : 증가폭] = 시퀀스
-> 증가폭이 지정된 경우는 개수가 반드시 같아야 한다.

10) 슬라이싱을 이용한 요소 삭제

인덱싱과 동일하게 del 연산자를 사용

del a[시작 : 끝]
del a[시작: 끝: 증가폭]

두 개의 문자열을 한 줄에 하나씩 입력받습니다.
apple
python 

첫 번째 문자열에서 홀수번쨰 문자 -> ape
두 번째 문자열에서 짝수번째 문자 -> yhn
이 둘을 합쳐서 출력 -> apeyhn