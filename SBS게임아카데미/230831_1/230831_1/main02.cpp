#include <iostream>

using namespace std;

void main()
{
	//★★★★★
	// 2. 포인터와 동적할당  

	// 동적할당
	// => 메모리할당
	int num1 = 3;
	//int라는 변수를 메모리할당 (4바이트)

	// 동적할당 <==> 정적할당
	
	// 정적할당
	// 이미 하고 있는 것
	// int num1 = 3;
	// int arr[52] = { 0, };

	// 동적할당?
	// 런타임 도중에 메모리를 할당하는 것
	// 우리맘대로 삭제도 가능

	// 메모리 개념
	// Stack, Heap
	// 스택은 메모리 공간이 좁다
	// 힙의 메모리 공간이 크다
	
	// Stack => 메모리 공간이 작은 대신, 빠르다.
	// Heap => 메모리 공간이 큰 대신, 느리다.
	// 사실 속도 차이는 그렇게 크진 않은데 공간이 작은지 큰지는 확실히 알아야 함

	// Stack
	// => 정적할당

	// Heap
	// => 동적할당

	// => 속도가 안중요하다면,
	// 그냥 항상 메모리공간이 큰 Heap에 저장하면 좋지 않나
	// 항상 빠른 stack에 저장하는게 좋지 않나.
	// 이건 나중에 정리해줌

	// Stack => 2MB
	// Heap => RAM 크기

	// 동적할당
	int* num = nullptr;
	// *num => 에러가 남
	// 
	// new int(값)
	// int라는 자료형을 생성하고
	// 생성된 주소값을 리턴한다.
	num = new int(3);


	//new, delete

	if (true)
	{
		//num3 생성
		int num3 = 0;
	}
	//num3 파괴

	//동적 할당은 이게 자동으로 안되서 직접 삭제 해줘야함

	//num 파괴
	delete num;
	num = nullptr;

	//new를 해줬으면 
	//delete를 해주는 코드도 어딘가에 있어야 한다.

	//class
	//class => 동적할당

	//가위 바위 보
	//MainGame 이라는 클래스를 만들고
	//이거를 동적할당으로 다루는 형식

}