day03


1. 리스트


시퀀스 (sequence) -> 순서가 있다
- 문자열 (str)
- 리스트 (list)
- 튜플 (tuple)
- range 함수


list -> 목록


a1 = 10
a2 = 20
...
a29 = 100
a30 = 50


-> 여러 개의 변수를 만들기 힘든 경우
리스트는 목록형이기 때문에 값을 나열하기 편하다




리스트 만들기


리스트변수 = [값1, 값2, ...](대괄호)
-> 리스트 안에 들어있는 값들을 요소(element)라고 부른다




리스트에는 여러 가지 자료형을 저장할 수 있음
무조건 값을 구분할 때에는 ,로 구분하여야 함


c = [
리스트가 완성되지 않은 경우 SyntaxError가 발생
-> 문법 오류, 구문 오류


c = [30 40]
콤마를 빼먹은 경우 SyntaxError가 발생




빈 리스트를 만드는 2가지 방법
1. []
대괄호 사이에 값을 안 집어 넣는 경우
-> 개발자가 직접 비어있는 값을 넣어준다


2. list()
list 함수를 이용하는 방식
-> 파이썬에서 빈 리스트를 지정해준다




2. range를 이용한 리스트 만들기


range -> 범위


0부터 5까지의 범위의 리스트
range(n) -> 0부터 n"미만"의 연속된 수들
range(6) -> 0, 1, 2, 3, 4, 5


5부터 10까지의 범위의 리스트
range(n, m) -> n 이상 m "미만"의 연속된 수들
range(5, 11) -> 5, 6, 7, 8, 9, 10


4부터 10까지의 2씩 증가하는 범위의 리스트
range(n, m, k) -> n 이상 m "미만" k씩 증가
range(4, 11, 2) -> 4, 6, 8, 10
range(10, -1, -1) -> 10, 9, 8, ..., 2, 1, 0


range는 값을 가지고만 있다
표현을 하기 위해서는 리스트로 바꿔주어야 한다.




3. 튜플 (tuple)


리스트와 같이 요소를 일렬로 저장


vs. 리스트
- 안에 있는 요소를 변경, 추가, 삭제 할 수 X
  튜플 = 읽기 전용 리스트
- () (소괄호)를 이용하여 표현 (굳이 안써도 됨) ***


값이 1개 들어있는 튜플
-> (값,)  값,




4. 리스트 <=> 튜플


리스트 -> 튜플 : 읽기 전용으로 변환
튜플 -> 리스트 : 수정 가능하도록 바꾸기


튜플에서 수정하려고 하면 TypeError (튜플은 값을 수정할 수 없다)




5. 문자열 <=> 리스트, 튜플


문자열 -> 리스트: list(문자열)
문자열 -> 튜플: tuple(문자열)
리스트, 튜플 -> 문자열: ''.join(리스트, 튜플)




6. 리스트, 튜플 언패킹 (list, tuple unpacking)
리스트와 튜플의 요소를 변수 여러 개에 할당하는 것
a = [1, 2, 3]  <- 패킹
x, y, z = a    <- 언패킹
print(x, y, z)




list, tuple, range


튜플 -10, -7, -4, -1, 1, 4, 7, 10


a = list(range(-10, 0, 3))
b = list(range(1, 11, 3))
c = tuple(a + b)
print(c)


7. 리스트/튜플 연산자


1) in/not in 연산자
리스트/튜플 안에 요소가 존재하는지


요소 in 리스트/튜플
요소 not in 리스트/튜플


2) 연결(+) 연산자
리스트 + 리스트 -> 리스트
튜플 + 튜플 -> 튜플
문자열 + 문자열 -> 문자열
range는 +를 이용해 합칠 수 없음 (TypeError)


3) 반복(*) 연산자
리스트 * 수 -> 리스트 반복
튜플 * 수 -> 튜플 반복
range는 *을 이용해 반복할 수 없음 (TypeError)


4) len() 함수
len(리스트, 튜플, range, 문자열)


5) 인덱싱 (indexing)
리스트, 튜플, range, 문자열[인덱스번호]
시퀀스 자료형에서 요소의 위치를 나타내는 것
*** 시작번호가 0이다 ***
-> 인덱스 번호는 번째 - 1
-> 마지막 인덱스는 len() - 1


6) 슬라이싱 (slicing)
리스트, 튜플, range, 문자열[인덱스번호]


시퀀스 자료형에서 연속된 요소들을 가져오는 것
리스트[n:m] -> n부터 m미만
리스트[n:m:k] -> n부터 m미만 k씩


7) 값 할당하기 (리스트 O, 튜플, range, 문자열 X)


a[인덱스] = 값


튜플, range, 문자열에 값을 할당
-> TypeError
인덱스의 값을 넘어서서 할당 -> IndexError


튜플 -> 리스트 -> 값 할당 -> 튜플
문자열 -> 리스트 -> 값 할당 -> 문자열


8) 값 삭제하기 (리스트 O, 튜플, range, 문자열 X)


delete -> del 연산자


del 리스트[인덱스번호]


튜플 -> 리스트 -> 삭제 -> 튜플
문자열 -> 리스트 -> 삭제 -> 문자열


9) 슬라이싱을 이용한 요소 할당


시퀀스[시작:끝] = 시퀀스


- 개수가 같을 필요는 없다 (줄어들기O, 늘어나기O)
- 형태가 시퀀스면 다 된다. (앞쪽의 형태로 통일이 됨)


리스트[시작:끝] = 튜플, 문자열, range
-> 튜플, 문자열, range이 아닌 리스트 형태로 저장이 된다


시퀀스[시작:끝:증가폭] = 시퀀스
-> 증가폭이 지정된 경우는 개수가 반드시 같아야 한다.


10) 슬라이싱을 이용한 요소 삭제


인덱싱과 동일하게 del 연산자를 사용


del a[시작:끝]
del a[시작:끝:증가폭]




두 개의 문자열을 한 줄에 하나 씩 입력받습니다.
apple
python


첫 번째 문자열에서 홀수번째 문자 -> ape
두 번째 문자열에서 짝수번째 문자 -> yhn
둘을 합쳐서 출력 -> apeyhn